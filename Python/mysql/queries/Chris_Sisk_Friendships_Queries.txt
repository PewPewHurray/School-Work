USE friendships_schema;

# Query: Create 6 new users
INSERT INTO users (first_name, last_name) VALUES ("Amy", "Giver");
INSERT INTO users (first_name, last_name) VALUES ("Eli", "Byers");
INSERT INTO users (first_name, last_name) VALUES ("Marky", "Mark");
INSERT INTO users (first_name, last_name) VALUES ("Big", "Bird");
INSERT INTO users (first_name, last_name) VALUES ("Kermit", "The Frog");
INSERT INTO users (first_name, last_name) VALUES ("Bruce", "Wayne");

SELECT * FROM users;

# Query: Have user 1 be friends with user 2, 4 and 6
INSERT INTO friendships (user_id, friend_id) VALUES (1, 2);
INSERT INTO friendships (user_id, friend_id) VALUES (1, 4);
INSERT INTO friendships (user_id, friend_id) VALUES (1, 6);

# Query: Have user 2 be friends with user 1, 3 and 5
INSERT INTO friendships (user_id, friend_id) VALUES (2, 1);
INSERT INTO friendships (user_id, friend_id) VALUES (2, 3);
INSERT INTO friendships (user_id, friend_id) VALUES (2, 5);

# Query: Have user 3 be friends with user 2 and 5
INSERT INTO friendships (user_id, friend_id) VALUES (3, 2);
INSERT INTO friendships (user_id, friend_id) VALUES (3, 5);

# Query: Have user 4 be friends with user 3
INSERT INTO friendships (user_id, friend_id) VALUES (4, 3);

# Query: Have user 5 be friends with user 1 and 6
INSERT INTO friendships (user_id, friend_id) VALUES (5, 1);
INSERT INTO friendships (user_id, friend_id) VALUES (5, 6);

# Query: Have user 6 be friends with user 2 and 3
INSERT INTO friendships (user_id, friend_id) VALUES (6, 2);
INSERT INTO friendships (user_id, friend_id) VALUES (6, 3);

# Query: Display the relationships create as shown in the above image
SELECT * FROM users JOIN friendships ON user_id = users.id LEFT JOIN users AS user2 ON user2.id = friend_id;
SELECT users.first_name AS first_name, users.last_name AS last_name, user2.first_name AS friend_first_name, user2.last_name AS friend_last_name FROM users JOIN friendships ON user_id = users.id LEFT JOIN users AS user2 ON user2.id = friend_id;

# NINJA Query: Return all users who are friends with the first user, make sure their names are displayed in results.
SELECT * FROM users JOIN friendships ON user_id = users.id LEFT JOIN users AS user2 ON user2.id = friend_id WHERE friend_id = 1;

# NINJA Query: Return the count of all friendships
SELECT COUNT(id) AS num_of_friendships FROM friendships;

# NINJA Query: Find out who has the most friends and return the count of their friends.
SELECT first_name, last_name, COUNT(friend_id) AS num_of_friends FROM users JOIN friendships On user_id = users.id GROUP BY user_id;

# NINJA Query: Return the friends of the third user in alphabetical order
SELECT * FROM friendships JOIN users on friend_id = users.id WHERE user_id = 3 ORDER BY first_name;
SELECT users.id, CONCAT(users.first_name, " ", users.last_name) AS full_name, CONCAT(user2.first_name, " ", user2.last_name) AS friend_full_name FROM users JOIN friendships ON users.id = user_id LEFT JOIN users AS user2 on friend_id = user2.id WHERE user_id = 3 ORDER BY user2.first_name;